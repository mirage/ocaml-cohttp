# OASIS_START
# DO NOT EDIT (digest: 43ac94cbae69d27aab17c420e739ded4)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library cohttp
"lib/cohttp.cmxs": use_cohttp
"lib/s.cmx": for-pack(Cohttp)
"lib/code.cmx": for-pack(Cohttp)
"lib/header.cmx": for-pack(Cohttp)
"lib/cookie.cmx": for-pack(Cohttp)
"lib/request.cmx": for-pack(Cohttp)
"lib/response.cmx": for-pack(Cohttp)
"lib/transfer.cmx": for-pack(Cohttp)
"lib/accept.cmx": for-pack(Cohttp)
"lib/accept_parser.cmx": for-pack(Cohttp)
"lib/accept_lexer.cmx": for-pack(Cohttp)
"lib/accept_types.cmx": for-pack(Cohttp)
"lib/auth.cmx": for-pack(Cohttp)
"lib/header_io.cmx": for-pack(Cohttp)
"lib/transfer_io.cmx": for-pack(Cohttp)
"lib/connection.cmx": for-pack(Cohttp)
"lib/body.cmx": for-pack(Cohttp)
"lib/string_io.cmx": for-pack(Cohttp)
"lib/conf.cmx": for-pack(Cohttp)
<lib/*.ml{,i,y}>: pkg_base64
<lib/*.ml{,i,y}>: pkg_bytes
<lib/*.ml{,i,y}>: pkg_fieldslib
<lib/*.ml{,i,y}>: pkg_fieldslib.syntax
<lib/*.ml{,i,y}>: pkg_re.emacs
<lib/*.ml{,i,y}>: pkg_sexplib
<lib/*.ml{,i,y}>: pkg_sexplib.syntax
<lib/*.ml{,i,y}>: pkg_stringext
<lib/*.ml{,i,y}>: pkg_uri
<lib/*.ml{,i,y}>: pkg_uri.services
# Library cohttp_lwt
"lwt/cohttp_lwt.cmxs": use_cohttp_lwt
# Library cohttp_lwt_unix
"lwt/cohttp_lwt_unix.cmxs": use_cohttp_lwt_unix
<lwt/*.ml{,i,y}>: pkg_base64
<lwt/*.ml{,i,y}>: pkg_bytes
<lwt/*.ml{,i,y}>: pkg_conduit.lwt-unix
<lwt/*.ml{,i,y}>: pkg_fieldslib
<lwt/*.ml{,i,y}>: pkg_fieldslib.syntax
<lwt/*.ml{,i,y}>: pkg_lwt
<lwt/*.ml{,i,y}>: pkg_lwt.syntax
<lwt/*.ml{,i,y}>: pkg_lwt.unix
<lwt/*.ml{,i,y}>: pkg_magic-mime
<lwt/*.ml{,i,y}>: pkg_re.emacs
<lwt/*.ml{,i,y}>: pkg_sexplib
<lwt/*.ml{,i,y}>: pkg_sexplib.syntax
<lwt/*.ml{,i,y}>: pkg_stringext
<lwt/*.ml{,i,y}>: pkg_unix
<lwt/*.ml{,i,y}>: pkg_uri
<lwt/*.ml{,i,y}>: pkg_uri.services
<lwt/*.ml{,i,y}>: use_cohttp
<lwt/*.ml{,i,y}>: use_cohttp_lwt
# Library cohttp_lwt_xhr
"js/cohttp_lwt_xhr.cmxs": use_cohttp_lwt_xhr
<js/*.ml{,i,y}>: pkg_base64
<js/*.ml{,i,y}>: pkg_bytes
<js/*.ml{,i,y}>: pkg_fieldslib
<js/*.ml{,i,y}>: pkg_fieldslib.syntax
<js/*.ml{,i,y}>: pkg_js_of_ocaml
<js/*.ml{,i,y}>: pkg_js_of_ocaml.syntax
<js/*.ml{,i,y}>: pkg_lwt
<js/*.ml{,i,y}>: pkg_lwt.syntax
<js/*.ml{,i,y}>: pkg_re.emacs
<js/*.ml{,i,y}>: pkg_sexplib
<js/*.ml{,i,y}>: pkg_sexplib.syntax
<js/*.ml{,i,y}>: pkg_stringext
<js/*.ml{,i,y}>: pkg_uri
<js/*.ml{,i,y}>: pkg_uri.services
<js/*.ml{,i,y}>: use_cohttp
<js/*.ml{,i,y}>: use_cohttp_lwt
# Library cohttp_async
"async/cohttp_async.cmxs": use_cohttp_async
<async/*.ml{,i,y}>: pkg_async
<async/*.ml{,i,y}>: pkg_base64
<async/*.ml{,i,y}>: pkg_bytes
<async/*.ml{,i,y}>: pkg_conduit.async
<async/*.ml{,i,y}>: pkg_fieldslib
<async/*.ml{,i,y}>: pkg_fieldslib.syntax
<async/*.ml{,i,y}>: pkg_magic-mime
<async/*.ml{,i,y}>: pkg_re.emacs
<async/*.ml{,i,y}>: pkg_sexplib
<async/*.ml{,i,y}>: pkg_sexplib.syntax
<async/*.ml{,i,y}>: pkg_stringext
<async/*.ml{,i,y}>: pkg_threads
<async/*.ml{,i,y}>: pkg_uri
<async/*.ml{,i,y}>: pkg_uri.services
<async/*.ml{,i,y}>: use_cohttp
# Executable test_parser
<lib_test/test_parser.{native,byte}>: pkg_base64
<lib_test/test_parser.{native,byte}>: pkg_bytes
<lib_test/test_parser.{native,byte}>: pkg_conduit.lwt-unix
<lib_test/test_parser.{native,byte}>: pkg_fieldslib
<lib_test/test_parser.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_parser.{native,byte}>: pkg_lwt
<lib_test/test_parser.{native,byte}>: pkg_lwt.syntax
<lib_test/test_parser.{native,byte}>: pkg_lwt.unix
<lib_test/test_parser.{native,byte}>: pkg_magic-mime
<lib_test/test_parser.{native,byte}>: pkg_oUnit
<lib_test/test_parser.{native,byte}>: pkg_re.emacs
<lib_test/test_parser.{native,byte}>: pkg_sexplib
<lib_test/test_parser.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_parser.{native,byte}>: pkg_stringext
<lib_test/test_parser.{native,byte}>: pkg_unix
<lib_test/test_parser.{native,byte}>: pkg_uri
<lib_test/test_parser.{native,byte}>: pkg_uri.services
<lib_test/test_parser.{native,byte}>: use_cohttp
<lib_test/test_parser.{native,byte}>: use_cohttp_lwt
<lib_test/test_parser.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_parser.{native,byte}>: custom
# Executable test_parser_async
<lib_test/test_parser_async.{native,byte}>: pkg_async
<lib_test/test_parser_async.{native,byte}>: pkg_base64
<lib_test/test_parser_async.{native,byte}>: pkg_bytes
<lib_test/test_parser_async.{native,byte}>: pkg_conduit.async
<lib_test/test_parser_async.{native,byte}>: pkg_fieldslib
<lib_test/test_parser_async.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_parser_async.{native,byte}>: pkg_magic-mime
<lib_test/test_parser_async.{native,byte}>: pkg_oUnit
<lib_test/test_parser_async.{native,byte}>: pkg_re.emacs
<lib_test/test_parser_async.{native,byte}>: pkg_sexplib
<lib_test/test_parser_async.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_parser_async.{native,byte}>: pkg_stringext
<lib_test/test_parser_async.{native,byte}>: pkg_threads
<lib_test/test_parser_async.{native,byte}>: pkg_uri
<lib_test/test_parser_async.{native,byte}>: pkg_uri.services
<lib_test/test_parser_async.{native,byte}>: use_cohttp
<lib_test/test_parser_async.{native,byte}>: use_cohttp_async
<lib_test/test_parser_async.{native,byte}>: custom
# Executable test_accept
<lib_test/test_accept.{native,byte}>: pkg_base64
<lib_test/test_accept.{native,byte}>: pkg_bytes
<lib_test/test_accept.{native,byte}>: pkg_fieldslib
<lib_test/test_accept.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_accept.{native,byte}>: pkg_oUnit
<lib_test/test_accept.{native,byte}>: pkg_re.emacs
<lib_test/test_accept.{native,byte}>: pkg_sexplib
<lib_test/test_accept.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_accept.{native,byte}>: pkg_stringext
<lib_test/test_accept.{native,byte}>: pkg_uri
<lib_test/test_accept.{native,byte}>: pkg_uri.services
<lib_test/test_accept.{native,byte}>: use_cohttp
<lib_test/test_accept.{native,byte}>: custom
# Executable test_header
<lib_test/test_header.{native,byte}>: pkg_base64
<lib_test/test_header.{native,byte}>: pkg_bytes
<lib_test/test_header.{native,byte}>: pkg_fieldslib
<lib_test/test_header.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_header.{native,byte}>: pkg_oUnit
<lib_test/test_header.{native,byte}>: pkg_re.emacs
<lib_test/test_header.{native,byte}>: pkg_sexplib
<lib_test/test_header.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_header.{native,byte}>: pkg_stringext
<lib_test/test_header.{native,byte}>: pkg_uri
<lib_test/test_header.{native,byte}>: pkg_uri.services
<lib_test/test_header.{native,byte}>: use_cohttp
<lib_test/test_header.{native,byte}>: custom
# Executable test_request
<lib_test/test_request.{native,byte}>: pkg_base64
<lib_test/test_request.{native,byte}>: pkg_bytes
<lib_test/test_request.{native,byte}>: pkg_fieldslib
<lib_test/test_request.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_request.{native,byte}>: pkg_oUnit
<lib_test/test_request.{native,byte}>: pkg_re.emacs
<lib_test/test_request.{native,byte}>: pkg_sexplib
<lib_test/test_request.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_request.{native,byte}>: pkg_stringext
<lib_test/test_request.{native,byte}>: pkg_uri
<lib_test/test_request.{native,byte}>: pkg_uri.services
<lib_test/test_request.{native,byte}>: use_cohttp
<lib_test/test_request.{native,byte}>: custom
# Executable test_net_lwt
<lib_test/test_net_lwt.{native,byte}>: pkg_base64
<lib_test/test_net_lwt.{native,byte}>: pkg_bytes
<lib_test/test_net_lwt.{native,byte}>: pkg_conduit.lwt-unix
<lib_test/test_net_lwt.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt.{native,byte}>: pkg_magic-mime
<lib_test/test_net_lwt.{native,byte}>: pkg_oUnit
<lib_test/test_net_lwt.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt.{native,byte}>: pkg_unix
<lib_test/test_net_lwt.{native,byte}>: pkg_uri
<lib_test/test_net_lwt.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt.{native,byte}>: use_cohttp
<lib_test/test_net_lwt.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt.{native,byte}>: custom
# Executable test_net_lwt_google
<lib_test/test_net_lwt_google.{native,byte}>: pkg_base64
<lib_test/test_net_lwt_google.{native,byte}>: pkg_bytes
<lib_test/test_net_lwt_google.{native,byte}>: pkg_conduit.lwt-unix
<lib_test/test_net_lwt_google.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_google.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_google.{native,byte}>: pkg_magic-mime
<lib_test/test_net_lwt_google.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_google.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_google.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_google.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_google.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_google.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_google.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_google.{native,byte}>: custom
# Executable test_net_lwt_google_custom_ctx
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_base64
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_bytes
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_conduit.lwt-unix
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_magic-mime
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: custom
# Executable test_net_lwt_lastminute
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_base64
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_bytes
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_conduit.lwt-unix
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_magic-mime
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_lastminute.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_lastminute.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_lastminute.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_lastminute.{native,byte}>: custom
# Executable test_net_lwt_server
<lib_test/test_net_lwt_server.{native,byte}>: pkg_base64
<lib_test/test_net_lwt_server.{native,byte}>: pkg_bytes
<lib_test/test_net_lwt_server.{native,byte}>: pkg_conduit.lwt-unix
<lib_test/test_net_lwt_server.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_server.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_server.{native,byte}>: pkg_magic-mime
<lib_test/test_net_lwt_server.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_server.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_server.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_server.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_server.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_server.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_server.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_server.{native,byte}>: custom
# Executable test_net_lwt_multi_get
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_base64
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_bytes
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_conduit.lwt-unix
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_magic-mime
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_multi_get.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_multi_get.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_multi_get.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_multi_get.{native,byte}>: custom
# Executable test_net_lwt_client_and_server
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_base64
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_bytes
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_conduit.lwt-unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_magic-mime
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp_lwt_unix
<lib_test/*.ml{,i,y}>: pkg_conduit.lwt-unix
<lib_test/*.ml{,i,y}>: pkg_lwt.unix
<lib_test/*.ml{,i,y}>: pkg_unix
<lib_test/*.ml{,i,y}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: custom
# Executable test_net_async
<lib_test/test_net_async.{native,byte}>: pkg_async
<lib_test/test_net_async.{native,byte}>: pkg_base64
<lib_test/test_net_async.{native,byte}>: pkg_bytes
<lib_test/test_net_async.{native,byte}>: pkg_conduit.async
<lib_test/test_net_async.{native,byte}>: pkg_fieldslib
<lib_test/test_net_async.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_async.{native,byte}>: pkg_magic-mime
<lib_test/test_net_async.{native,byte}>: pkg_oUnit
<lib_test/test_net_async.{native,byte}>: pkg_re.emacs
<lib_test/test_net_async.{native,byte}>: pkg_sexplib
<lib_test/test_net_async.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_async.{native,byte}>: pkg_stringext
<lib_test/test_net_async.{native,byte}>: pkg_threads
<lib_test/test_net_async.{native,byte}>: pkg_uri
<lib_test/test_net_async.{native,byte}>: pkg_uri.services
<lib_test/test_net_async.{native,byte}>: use_cohttp
<lib_test/test_net_async.{native,byte}>: use_cohttp_async
<lib_test/test_net_async.{native,byte}>: custom
# Executable test_net_async_http10
<lib_test/test_net_async_http10.{native,byte}>: pkg_async
<lib_test/test_net_async_http10.{native,byte}>: pkg_base64
<lib_test/test_net_async_http10.{native,byte}>: pkg_bytes
<lib_test/test_net_async_http10.{native,byte}>: pkg_conduit.async
<lib_test/test_net_async_http10.{native,byte}>: pkg_fieldslib
<lib_test/test_net_async_http10.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_async_http10.{native,byte}>: pkg_magic-mime
<lib_test/test_net_async_http10.{native,byte}>: pkg_oUnit
<lib_test/test_net_async_http10.{native,byte}>: pkg_re.emacs
<lib_test/test_net_async_http10.{native,byte}>: pkg_sexplib
<lib_test/test_net_async_http10.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_async_http10.{native,byte}>: pkg_stringext
<lib_test/test_net_async_http10.{native,byte}>: pkg_threads
<lib_test/test_net_async_http10.{native,byte}>: pkg_uri
<lib_test/test_net_async_http10.{native,byte}>: pkg_uri.services
<lib_test/test_net_async_http10.{native,byte}>: use_cohttp
<lib_test/test_net_async_http10.{native,byte}>: use_cohttp_async
<lib_test/test_net_async_http10.{native,byte}>: custom
# Executable test_net_async_multi_get
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_async
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_base64
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_bytes
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_conduit.async
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_fieldslib
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_magic-mime
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_oUnit
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_re.emacs
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_sexplib
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_stringext
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_threads
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_uri
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_uri.services
<lib_test/test_net_async_multi_get.{native,byte}>: use_cohttp
<lib_test/test_net_async_multi_get.{native,byte}>: use_cohttp_async
<lib_test/test_net_async_multi_get.{native,byte}>: custom
# Executable test_net_async_server
<lib_test/test_net_async_server.{native,byte}>: pkg_async
<lib_test/test_net_async_server.{native,byte}>: pkg_base64
<lib_test/test_net_async_server.{native,byte}>: pkg_bytes
<lib_test/test_net_async_server.{native,byte}>: pkg_conduit.async
<lib_test/test_net_async_server.{native,byte}>: pkg_fieldslib
<lib_test/test_net_async_server.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_async_server.{native,byte}>: pkg_magic-mime
<lib_test/test_net_async_server.{native,byte}>: pkg_oUnit
<lib_test/test_net_async_server.{native,byte}>: pkg_re.emacs
<lib_test/test_net_async_server.{native,byte}>: pkg_sexplib
<lib_test/test_net_async_server.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_async_server.{native,byte}>: pkg_stringext
<lib_test/test_net_async_server.{native,byte}>: pkg_threads
<lib_test/test_net_async_server.{native,byte}>: pkg_uri
<lib_test/test_net_async_server.{native,byte}>: pkg_uri.services
<lib_test/test_net_async_server.{native,byte}>: use_cohttp
<lib_test/test_net_async_server.{native,byte}>: use_cohttp_async
<lib_test/*.ml{,i,y}>: pkg_async
<lib_test/*.ml{,i,y}>: pkg_conduit.async
<lib_test/*.ml{,i,y}>: pkg_magic-mime
<lib_test/*.ml{,i,y}>: pkg_oUnit
<lib_test/*.ml{,i,y}>: pkg_threads
<lib_test/*.ml{,i,y}>: use_cohttp_async
<lib_test/test_net_async_server.{native,byte}>: custom
# Executable cohttp-server-async
<bin/cohttp_server_async.{native,byte}>: pkg_async
<bin/cohttp_server_async.{native,byte}>: pkg_base64
<bin/cohttp_server_async.{native,byte}>: pkg_bytes
<bin/cohttp_server_async.{native,byte}>: pkg_conduit.async
<bin/cohttp_server_async.{native,byte}>: pkg_fieldslib
<bin/cohttp_server_async.{native,byte}>: pkg_fieldslib.syntax
<bin/cohttp_server_async.{native,byte}>: pkg_magic-mime
<bin/cohttp_server_async.{native,byte}>: pkg_re.emacs
<bin/cohttp_server_async.{native,byte}>: pkg_sexplib
<bin/cohttp_server_async.{native,byte}>: pkg_sexplib.syntax
<bin/cohttp_server_async.{native,byte}>: pkg_stringext
<bin/cohttp_server_async.{native,byte}>: pkg_threads
<bin/cohttp_server_async.{native,byte}>: pkg_uri
<bin/cohttp_server_async.{native,byte}>: pkg_uri.services
<bin/cohttp_server_async.{native,byte}>: use_cohttp
<bin/cohttp_server_async.{native,byte}>: use_cohttp_async
<bin/cohttp_server_async.{native,byte}>: custom
# Executable cohttp-curl-async
<bin/cohttp_curl_async.{native,byte}>: pkg_async
<bin/cohttp_curl_async.{native,byte}>: pkg_base64
<bin/cohttp_curl_async.{native,byte}>: pkg_bytes
<bin/cohttp_curl_async.{native,byte}>: pkg_conduit.async
<bin/cohttp_curl_async.{native,byte}>: pkg_fieldslib
<bin/cohttp_curl_async.{native,byte}>: pkg_fieldslib.syntax
<bin/cohttp_curl_async.{native,byte}>: pkg_magic-mime
<bin/cohttp_curl_async.{native,byte}>: pkg_re.emacs
<bin/cohttp_curl_async.{native,byte}>: pkg_sexplib
<bin/cohttp_curl_async.{native,byte}>: pkg_sexplib.syntax
<bin/cohttp_curl_async.{native,byte}>: pkg_stringext
<bin/cohttp_curl_async.{native,byte}>: pkg_threads
<bin/cohttp_curl_async.{native,byte}>: pkg_uri
<bin/cohttp_curl_async.{native,byte}>: pkg_uri.services
<bin/cohttp_curl_async.{native,byte}>: use_cohttp
<bin/cohttp_curl_async.{native,byte}>: use_cohttp_async
<bin/*.ml{,i,y}>: pkg_async
<bin/*.ml{,i,y}>: pkg_conduit.async
<bin/*.ml{,i,y}>: pkg_threads
<bin/*.ml{,i,y}>: use_cohttp_async
<bin/cohttp_curl_async.{native,byte}>: custom
# Executable cohttp-server-lwt
<bin/cohttp_server_lwt.{native,byte}>: pkg_base64
<bin/cohttp_server_lwt.{native,byte}>: pkg_bytes
<bin/cohttp_server_lwt.{native,byte}>: pkg_cmdliner
<bin/cohttp_server_lwt.{native,byte}>: pkg_conduit.lwt-unix
<bin/cohttp_server_lwt.{native,byte}>: pkg_fieldslib
<bin/cohttp_server_lwt.{native,byte}>: pkg_fieldslib.syntax
<bin/cohttp_server_lwt.{native,byte}>: pkg_lwt
<bin/cohttp_server_lwt.{native,byte}>: pkg_lwt.syntax
<bin/cohttp_server_lwt.{native,byte}>: pkg_lwt.unix
<bin/cohttp_server_lwt.{native,byte}>: pkg_magic-mime
<bin/cohttp_server_lwt.{native,byte}>: pkg_re.emacs
<bin/cohttp_server_lwt.{native,byte}>: pkg_sexplib
<bin/cohttp_server_lwt.{native,byte}>: pkg_sexplib.syntax
<bin/cohttp_server_lwt.{native,byte}>: pkg_stringext
<bin/cohttp_server_lwt.{native,byte}>: pkg_unix
<bin/cohttp_server_lwt.{native,byte}>: pkg_uri
<bin/cohttp_server_lwt.{native,byte}>: pkg_uri.services
<bin/cohttp_server_lwt.{native,byte}>: use_cohttp
<bin/cohttp_server_lwt.{native,byte}>: use_cohttp_lwt
<bin/cohttp_server_lwt.{native,byte}>: use_cohttp_lwt_unix
<bin/cohttp_server_lwt.{native,byte}>: custom
# Executable cohttp-proxy-lwt
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_base64
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_bytes
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_cmdliner
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_conduit.lwt-unix
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_fieldslib
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_fieldslib.syntax
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_lwt
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_lwt.syntax
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_lwt.unix
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_magic-mime
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_re.emacs
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_sexplib
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_sexplib.syntax
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_stringext
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_unix
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_uri
<bin/cohttp_proxy_lwt.{native,byte}>: pkg_uri.services
<bin/cohttp_proxy_lwt.{native,byte}>: use_cohttp
<bin/cohttp_proxy_lwt.{native,byte}>: use_cohttp_lwt
<bin/cohttp_proxy_lwt.{native,byte}>: use_cohttp_lwt_unix
<bin/cohttp_proxy_lwt.{native,byte}>: custom
# Executable cohttp-curl-lwt
<bin/cohttp_curl_lwt.{native,byte}>: pkg_base64
<bin/cohttp_curl_lwt.{native,byte}>: pkg_bytes
<bin/cohttp_curl_lwt.{native,byte}>: pkg_cmdliner
<bin/cohttp_curl_lwt.{native,byte}>: pkg_conduit.lwt-unix
<bin/cohttp_curl_lwt.{native,byte}>: pkg_fieldslib
<bin/cohttp_curl_lwt.{native,byte}>: pkg_fieldslib.syntax
<bin/cohttp_curl_lwt.{native,byte}>: pkg_lwt
<bin/cohttp_curl_lwt.{native,byte}>: pkg_lwt.syntax
<bin/cohttp_curl_lwt.{native,byte}>: pkg_lwt.unix
<bin/cohttp_curl_lwt.{native,byte}>: pkg_magic-mime
<bin/cohttp_curl_lwt.{native,byte}>: pkg_re.emacs
<bin/cohttp_curl_lwt.{native,byte}>: pkg_sexplib
<bin/cohttp_curl_lwt.{native,byte}>: pkg_sexplib.syntax
<bin/cohttp_curl_lwt.{native,byte}>: pkg_stringext
<bin/cohttp_curl_lwt.{native,byte}>: pkg_unix
<bin/cohttp_curl_lwt.{native,byte}>: pkg_uri
<bin/cohttp_curl_lwt.{native,byte}>: pkg_uri.services
<bin/cohttp_curl_lwt.{native,byte}>: use_cohttp
<bin/cohttp_curl_lwt.{native,byte}>: use_cohttp_lwt
<bin/cohttp_curl_lwt.{native,byte}>: use_cohttp_lwt_unix
<bin/*.ml{,i,y}>: pkg_base64
<bin/*.ml{,i,y}>: pkg_bytes
<bin/*.ml{,i,y}>: pkg_cmdliner
<bin/*.ml{,i,y}>: pkg_conduit.lwt-unix
<bin/*.ml{,i,y}>: pkg_fieldslib
<bin/*.ml{,i,y}>: pkg_fieldslib.syntax
<bin/*.ml{,i,y}>: pkg_lwt
<bin/*.ml{,i,y}>: pkg_lwt.syntax
<bin/*.ml{,i,y}>: pkg_lwt.unix
<bin/*.ml{,i,y}>: pkg_magic-mime
<bin/*.ml{,i,y}>: pkg_re.emacs
<bin/*.ml{,i,y}>: pkg_sexplib
<bin/*.ml{,i,y}>: pkg_sexplib.syntax
<bin/*.ml{,i,y}>: pkg_stringext
<bin/*.ml{,i,y}>: pkg_unix
<bin/*.ml{,i,y}>: pkg_uri
<bin/*.ml{,i,y}>: pkg_uri.services
<bin/*.ml{,i,y}>: use_cohttp
<bin/*.ml{,i,y}>: use_cohttp_lwt
<bin/*.ml{,i,y}>: use_cohttp_lwt_unix
<bin/cohttp_curl_lwt.{native,byte}>: custom
# Executable async-hello-world
<examples/async/hello_world.{native,byte}>: pkg_async
<examples/async/hello_world.{native,byte}>: pkg_base64
<examples/async/hello_world.{native,byte}>: pkg_bytes
<examples/async/hello_world.{native,byte}>: pkg_conduit.async
<examples/async/hello_world.{native,byte}>: pkg_fieldslib
<examples/async/hello_world.{native,byte}>: pkg_fieldslib.syntax
<examples/async/hello_world.{native,byte}>: pkg_magic-mime
<examples/async/hello_world.{native,byte}>: pkg_re.emacs
<examples/async/hello_world.{native,byte}>: pkg_sexplib
<examples/async/hello_world.{native,byte}>: pkg_sexplib.syntax
<examples/async/hello_world.{native,byte}>: pkg_stringext
<examples/async/hello_world.{native,byte}>: pkg_threads
<examples/async/hello_world.{native,byte}>: pkg_uri
<examples/async/hello_world.{native,byte}>: pkg_uri.services
<examples/async/hello_world.{native,byte}>: use_cohttp
<examples/async/hello_world.{native,byte}>: use_cohttp_async
<examples/async/hello_world.{native,byte}>: custom
# Executable async-s3-cp
<examples/async/s3_cp.{native,byte}>: pkg_async
<examples/async/s3_cp.{native,byte}>: pkg_base64
<examples/async/s3_cp.{native,byte}>: pkg_bytes
<examples/async/s3_cp.{native,byte}>: pkg_conduit.async
<examples/async/s3_cp.{native,byte}>: pkg_cstruct
<examples/async/s3_cp.{native,byte}>: pkg_fieldslib
<examples/async/s3_cp.{native,byte}>: pkg_fieldslib.syntax
<examples/async/s3_cp.{native,byte}>: pkg_magic-mime
<examples/async/s3_cp.{native,byte}>: pkg_nocrypto
<examples/async/s3_cp.{native,byte}>: pkg_re.emacs
<examples/async/s3_cp.{native,byte}>: pkg_sexplib
<examples/async/s3_cp.{native,byte}>: pkg_sexplib.syntax
<examples/async/s3_cp.{native,byte}>: pkg_stringext
<examples/async/s3_cp.{native,byte}>: pkg_threads
<examples/async/s3_cp.{native,byte}>: pkg_uri
<examples/async/s3_cp.{native,byte}>: pkg_uri.services
<examples/async/s3_cp.{native,byte}>: use_cohttp
<examples/async/s3_cp.{native,byte}>: use_cohttp_async
<examples/async/*.ml{,i,y}>: pkg_cstruct
<examples/async/*.ml{,i,y}>: pkg_nocrypto
<examples/async/s3_cp.{native,byte}>: custom
# Executable test_xhr
"lib_test/test_xhr.byte": pkg_base64
"lib_test/test_xhr.byte": pkg_bytes
"lib_test/test_xhr.byte": pkg_fieldslib
"lib_test/test_xhr.byte": pkg_fieldslib.syntax
"lib_test/test_xhr.byte": pkg_js_of_ocaml
"lib_test/test_xhr.byte": pkg_js_of_ocaml.syntax
"lib_test/test_xhr.byte": pkg_lwt
"lib_test/test_xhr.byte": pkg_lwt.syntax
"lib_test/test_xhr.byte": pkg_re.emacs
"lib_test/test_xhr.byte": pkg_sexplib
"lib_test/test_xhr.byte": pkg_sexplib.syntax
"lib_test/test_xhr.byte": pkg_stringext
"lib_test/test_xhr.byte": pkg_uri
"lib_test/test_xhr.byte": pkg_uri.services
"lib_test/test_xhr.byte": use_cohttp
"lib_test/test_xhr.byte": use_cohttp_lwt
"lib_test/test_xhr.byte": use_cohttp_lwt_xhr
<lib_test/*.ml{,i,y}>: pkg_base64
<lib_test/*.ml{,i,y}>: pkg_bytes
<lib_test/*.ml{,i,y}>: pkg_fieldslib
<lib_test/*.ml{,i,y}>: pkg_fieldslib.syntax
<lib_test/*.ml{,i,y}>: pkg_js_of_ocaml
<lib_test/*.ml{,i,y}>: pkg_js_of_ocaml.syntax
<lib_test/*.ml{,i,y}>: pkg_lwt
<lib_test/*.ml{,i,y}>: pkg_lwt.syntax
<lib_test/*.ml{,i,y}>: pkg_re.emacs
<lib_test/*.ml{,i,y}>: pkg_sexplib
<lib_test/*.ml{,i,y}>: pkg_sexplib.syntax
<lib_test/*.ml{,i,y}>: pkg_stringext
<lib_test/*.ml{,i,y}>: pkg_uri
<lib_test/*.ml{,i,y}>: pkg_uri.services
<lib_test/*.ml{,i,y}>: use_cohttp
<lib_test/*.ml{,i,y}>: use_cohttp_lwt
<lib_test/*.ml{,i,y}>: use_cohttp_lwt_xhr
"lib_test/test_xhr.byte": custom
# Executable async-receive-post
<examples/async/receive_post.{native,byte}>: pkg_async
<examples/async/receive_post.{native,byte}>: pkg_base64
<examples/async/receive_post.{native,byte}>: pkg_bytes
<examples/async/receive_post.{native,byte}>: pkg_conduit.async
<examples/async/receive_post.{native,byte}>: pkg_fieldslib
<examples/async/receive_post.{native,byte}>: pkg_fieldslib.syntax
<examples/async/receive_post.{native,byte}>: pkg_magic-mime
<examples/async/receive_post.{native,byte}>: pkg_re.emacs
<examples/async/receive_post.{native,byte}>: pkg_sexplib
<examples/async/receive_post.{native,byte}>: pkg_sexplib.syntax
<examples/async/receive_post.{native,byte}>: pkg_stringext
<examples/async/receive_post.{native,byte}>: pkg_threads
<examples/async/receive_post.{native,byte}>: pkg_uri
<examples/async/receive_post.{native,byte}>: pkg_uri.services
<examples/async/receive_post.{native,byte}>: use_cohttp
<examples/async/receive_post.{native,byte}>: use_cohttp_async
<examples/async/*.ml{,i,y}>: pkg_async
<examples/async/*.ml{,i,y}>: pkg_base64
<examples/async/*.ml{,i,y}>: pkg_bytes
<examples/async/*.ml{,i,y}>: pkg_conduit.async
<examples/async/*.ml{,i,y}>: pkg_fieldslib
<examples/async/*.ml{,i,y}>: pkg_fieldslib.syntax
<examples/async/*.ml{,i,y}>: pkg_magic-mime
<examples/async/*.ml{,i,y}>: pkg_re.emacs
<examples/async/*.ml{,i,y}>: pkg_sexplib
<examples/async/*.ml{,i,y}>: pkg_sexplib.syntax
<examples/async/*.ml{,i,y}>: pkg_stringext
<examples/async/*.ml{,i,y}>: pkg_threads
<examples/async/*.ml{,i,y}>: pkg_uri
<examples/async/*.ml{,i,y}>: pkg_uri.services
<examples/async/*.ml{,i,y}>: use_cohttp
<examples/async/*.ml{,i,y}>: use_cohttp_async
<examples/async/receive_post.{native,byte}>: custom
# OASIS_STOP
true: principal, strict_sequence, debug, short_paths
true: annot
