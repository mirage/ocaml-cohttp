# OASIS_START
# DO NOT EDIT (digest: 1b2b864273887ce54377364050d2ef95)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library cohttp
"cohttp/cohttp.cmxs": use_cohttp
"cohttp/IO.cmx": for-pack(Cohttp)
"cohttp/code.cmx": for-pack(Cohttp)
"cohttp/header.cmx": for-pack(Cohttp)
"cohttp/cookie.cmx": for-pack(Cohttp)
"cohttp/request.cmx": for-pack(Cohttp)
"cohttp/response.cmx": for-pack(Cohttp)
"cohttp/transfer.cmx": for-pack(Cohttp)
"cohttp/accept.cmx": for-pack(Cohttp)
"cohttp/accept_parser.cmx": for-pack(Cohttp)
"cohttp/accept_lexer.cmx": for-pack(Cohttp)
"cohttp/accept_types.cmx": for-pack(Cohttp)
"cohttp/base64.cmx": for-pack(Cohttp)
"cohttp/auth.cmx": for-pack(Cohttp)
"cohttp/header_io.cmx": for-pack(Cohttp)
"cohttp/transfer_io.cmx": for-pack(Cohttp)
"cohttp/client.cmx": for-pack(Cohttp)
"cohttp/connection.cmx": for-pack(Cohttp)
"cohttp/body.cmx": for-pack(Cohttp)
<cohttp/*.ml{,i}>: pkg_fieldslib
<cohttp/*.ml{,i}>: pkg_fieldslib.syntax
<cohttp/*.ml{,i}>: pkg_re.emacs
<cohttp/*.ml{,i}>: pkg_sexplib
<cohttp/*.ml{,i}>: pkg_sexplib.syntax
<cohttp/*.ml{,i}>: pkg_stringext
<cohttp/*.ml{,i}>: pkg_uri
<cohttp/*.ml{,i}>: pkg_uri.services
# Library cohttp_lwt
"lwt/cohttp_lwt.cmxs": use_cohttp_lwt
# Library cohttp_lwt_unix
"lwt/cohttp_lwt_unix.cmxs": use_cohttp_lwt_unix
<lwt/*.ml{,i}>: pkg_fieldslib
<lwt/*.ml{,i}>: pkg_fieldslib.syntax
<lwt/*.ml{,i}>: pkg_lwt
<lwt/*.ml{,i}>: pkg_lwt.ssl
<lwt/*.ml{,i}>: pkg_lwt.syntax
<lwt/*.ml{,i}>: pkg_lwt.unix
<lwt/*.ml{,i}>: pkg_re.emacs
<lwt/*.ml{,i}>: pkg_sexplib
<lwt/*.ml{,i}>: pkg_sexplib.syntax
<lwt/*.ml{,i}>: pkg_stringext
<lwt/*.ml{,i}>: pkg_unix
<lwt/*.ml{,i}>: pkg_uri
<lwt/*.ml{,i}>: pkg_uri.services
<lwt/*.ml{,i}>: use_cohttp
<lwt/*.ml{,i}>: use_cohttp_lwt
# Library cohttp_async
"async/cohttp_async.cmxs": use_cohttp_async
<async/*.ml{,i}>: pkg_async
<async/*.ml{,i}>: pkg_async_ssl
<async/*.ml{,i}>: pkg_fieldslib
<async/*.ml{,i}>: pkg_fieldslib.syntax
<async/*.ml{,i}>: pkg_re.emacs
<async/*.ml{,i}>: pkg_sexplib
<async/*.ml{,i}>: pkg_sexplib.syntax
<async/*.ml{,i}>: pkg_stringext
<async/*.ml{,i}>: pkg_threads
<async/*.ml{,i}>: pkg_uri
<async/*.ml{,i}>: pkg_uri.services
<async/*.ml{,i}>: use_cohttp
# Executable test_parser
<lib_test/test_parser.{native,byte}>: pkg_fieldslib
<lib_test/test_parser.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_parser.{native,byte}>: pkg_lwt
<lib_test/test_parser.{native,byte}>: pkg_lwt.ssl
<lib_test/test_parser.{native,byte}>: pkg_lwt.syntax
<lib_test/test_parser.{native,byte}>: pkg_lwt.unix
<lib_test/test_parser.{native,byte}>: pkg_oUnit
<lib_test/test_parser.{native,byte}>: pkg_re.emacs
<lib_test/test_parser.{native,byte}>: pkg_sexplib
<lib_test/test_parser.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_parser.{native,byte}>: pkg_stringext
<lib_test/test_parser.{native,byte}>: pkg_unix
<lib_test/test_parser.{native,byte}>: pkg_uri
<lib_test/test_parser.{native,byte}>: pkg_uri.services
<lib_test/test_parser.{native,byte}>: use_cohttp
<lib_test/test_parser.{native,byte}>: use_cohttp_lwt
<lib_test/test_parser.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_parser.{native,byte}>: custom
# Executable test_accept
<lib_test/test_accept.{native,byte}>: pkg_fieldslib
<lib_test/test_accept.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_accept.{native,byte}>: pkg_oUnit
<lib_test/test_accept.{native,byte}>: pkg_re.emacs
<lib_test/test_accept.{native,byte}>: pkg_sexplib
<lib_test/test_accept.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_accept.{native,byte}>: pkg_stringext
<lib_test/test_accept.{native,byte}>: pkg_uri
<lib_test/test_accept.{native,byte}>: pkg_uri.services
<lib_test/test_accept.{native,byte}>: use_cohttp
<lib_test/test_accept.{native,byte}>: custom
# Executable test_header
<lib_test/test_header.{native,byte}>: pkg_fieldslib
<lib_test/test_header.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_header.{native,byte}>: pkg_oUnit
<lib_test/test_header.{native,byte}>: pkg_re.emacs
<lib_test/test_header.{native,byte}>: pkg_sexplib
<lib_test/test_header.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_header.{native,byte}>: pkg_stringext
<lib_test/test_header.{native,byte}>: pkg_uri
<lib_test/test_header.{native,byte}>: pkg_uri.services
<lib_test/test_header.{native,byte}>: use_cohttp
<lib_test/test_header.{native,byte}>: custom
# Executable test_net_lwt
<lib_test/test_net_lwt.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt.{native,byte}>: pkg_oUnit
<lib_test/test_net_lwt.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt.{native,byte}>: pkg_unix
<lib_test/test_net_lwt.{native,byte}>: pkg_uri
<lib_test/test_net_lwt.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt.{native,byte}>: use_cohttp
<lib_test/test_net_lwt.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt.{native,byte}>: custom
# Executable test_net_lwt_google
<lib_test/test_net_lwt_google.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_google.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_google.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_google.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_google.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_google.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_google.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_google.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_google.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_google.{native,byte}>: custom
# Executable test_net_lwt_lastminute
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_lastminute.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_lastminute.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_lastminute.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_lastminute.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_lastminute.{native,byte}>: custom
# Executable test_net_lwt_server
<lib_test/test_net_lwt_server.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_server.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_server.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_server.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_server.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_server.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_server.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_server.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_server.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_server.{native,byte}>: custom
# Executable test_net_lwt_multi_get
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_multi_get.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_multi_get.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_multi_get.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_multi_get.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_multi_get.{native,byte}>: custom
# Executable test_net_lwt_client_and_server
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_fieldslib
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_re.emacs
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_sexplib
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_stringext
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp_lwt_unix
<lib_test/*.ml{,i}>: pkg_lwt
<lib_test/*.ml{,i}>: pkg_lwt.ssl
<lib_test/*.ml{,i}>: pkg_lwt.syntax
<lib_test/*.ml{,i}>: pkg_lwt.unix
<lib_test/*.ml{,i}>: pkg_unix
<lib_test/*.ml{,i}>: use_cohttp_lwt
<lib_test/*.ml{,i}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: custom
# Executable test_net_async
<lib_test/test_net_async.{native,byte}>: pkg_async
<lib_test/test_net_async.{native,byte}>: pkg_async_ssl
<lib_test/test_net_async.{native,byte}>: pkg_fieldslib
<lib_test/test_net_async.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_async.{native,byte}>: pkg_oUnit
<lib_test/test_net_async.{native,byte}>: pkg_re.emacs
<lib_test/test_net_async.{native,byte}>: pkg_sexplib
<lib_test/test_net_async.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_async.{native,byte}>: pkg_stringext
<lib_test/test_net_async.{native,byte}>: pkg_threads
<lib_test/test_net_async.{native,byte}>: pkg_uri
<lib_test/test_net_async.{native,byte}>: pkg_uri.services
<lib_test/test_net_async.{native,byte}>: use_cohttp
<lib_test/test_net_async.{native,byte}>: use_cohttp_async
<lib_test/test_net_async.{native,byte}>: custom
# Executable test_net_async_http10
<lib_test/test_net_async_http10.{native,byte}>: pkg_async
<lib_test/test_net_async_http10.{native,byte}>: pkg_async_ssl
<lib_test/test_net_async_http10.{native,byte}>: pkg_fieldslib
<lib_test/test_net_async_http10.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_async_http10.{native,byte}>: pkg_oUnit
<lib_test/test_net_async_http10.{native,byte}>: pkg_re.emacs
<lib_test/test_net_async_http10.{native,byte}>: pkg_sexplib
<lib_test/test_net_async_http10.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_async_http10.{native,byte}>: pkg_stringext
<lib_test/test_net_async_http10.{native,byte}>: pkg_threads
<lib_test/test_net_async_http10.{native,byte}>: pkg_uri
<lib_test/test_net_async_http10.{native,byte}>: pkg_uri.services
<lib_test/test_net_async_http10.{native,byte}>: use_cohttp
<lib_test/test_net_async_http10.{native,byte}>: use_cohttp_async
<lib_test/test_net_async_http10.{native,byte}>: custom
# Executable test_net_async_multi_get
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_async
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_async_ssl
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_fieldslib
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_oUnit
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_re.emacs
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_sexplib
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_stringext
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_threads
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_uri
<lib_test/test_net_async_multi_get.{native,byte}>: pkg_uri.services
<lib_test/test_net_async_multi_get.{native,byte}>: use_cohttp
<lib_test/test_net_async_multi_get.{native,byte}>: use_cohttp_async
<lib_test/test_net_async_multi_get.{native,byte}>: custom
# Executable test_net_async_server
<lib_test/test_net_async_server.{native,byte}>: pkg_async
<lib_test/test_net_async_server.{native,byte}>: pkg_async_ssl
<lib_test/test_net_async_server.{native,byte}>: pkg_fieldslib
<lib_test/test_net_async_server.{native,byte}>: pkg_fieldslib.syntax
<lib_test/test_net_async_server.{native,byte}>: pkg_oUnit
<lib_test/test_net_async_server.{native,byte}>: pkg_re.emacs
<lib_test/test_net_async_server.{native,byte}>: pkg_sexplib
<lib_test/test_net_async_server.{native,byte}>: pkg_sexplib.syntax
<lib_test/test_net_async_server.{native,byte}>: pkg_stringext
<lib_test/test_net_async_server.{native,byte}>: pkg_threads
<lib_test/test_net_async_server.{native,byte}>: pkg_uri
<lib_test/test_net_async_server.{native,byte}>: pkg_uri.services
<lib_test/test_net_async_server.{native,byte}>: use_cohttp
<lib_test/test_net_async_server.{native,byte}>: use_cohttp_async
<lib_test/*.ml{,i}>: pkg_async
<lib_test/*.ml{,i}>: pkg_async_ssl
<lib_test/*.ml{,i}>: pkg_fieldslib
<lib_test/*.ml{,i}>: pkg_fieldslib.syntax
<lib_test/*.ml{,i}>: pkg_oUnit
<lib_test/*.ml{,i}>: pkg_re.emacs
<lib_test/*.ml{,i}>: pkg_sexplib
<lib_test/*.ml{,i}>: pkg_sexplib.syntax
<lib_test/*.ml{,i}>: pkg_stringext
<lib_test/*.ml{,i}>: pkg_threads
<lib_test/*.ml{,i}>: pkg_uri
<lib_test/*.ml{,i}>: pkg_uri.services
<lib_test/*.ml{,i}>: use_cohttp
<lib_test/*.ml{,i}>: use_cohttp_async
<lib_test/test_net_async_server.{native,byte}>: custom
# Executable cohttp-server-async
<bin/cohttp_server_async.{native,byte}>: pkg_async
<bin/cohttp_server_async.{native,byte}>: pkg_async_ssl
<bin/cohttp_server_async.{native,byte}>: pkg_fieldslib
<bin/cohttp_server_async.{native,byte}>: pkg_fieldslib.syntax
<bin/cohttp_server_async.{native,byte}>: pkg_re.emacs
<bin/cohttp_server_async.{native,byte}>: pkg_sexplib
<bin/cohttp_server_async.{native,byte}>: pkg_sexplib.syntax
<bin/cohttp_server_async.{native,byte}>: pkg_stringext
<bin/cohttp_server_async.{native,byte}>: pkg_threads
<bin/cohttp_server_async.{native,byte}>: pkg_uri
<bin/cohttp_server_async.{native,byte}>: pkg_uri.services
<bin/cohttp_server_async.{native,byte}>: use_cohttp
<bin/cohttp_server_async.{native,byte}>: use_cohttp_async
<bin/*.ml{,i}>: pkg_async
<bin/*.ml{,i}>: pkg_async_ssl
<bin/*.ml{,i}>: pkg_threads
<bin/*.ml{,i}>: use_cohttp_async
<bin/cohttp_server_async.{native,byte}>: custom
# Executable cohttp-server-lwt
<bin/cohttp_server_lwt.{native,byte}>: pkg_fieldslib
<bin/cohttp_server_lwt.{native,byte}>: pkg_fieldslib.syntax
<bin/cohttp_server_lwt.{native,byte}>: pkg_lwt
<bin/cohttp_server_lwt.{native,byte}>: pkg_lwt.ssl
<bin/cohttp_server_lwt.{native,byte}>: pkg_lwt.syntax
<bin/cohttp_server_lwt.{native,byte}>: pkg_lwt.unix
<bin/cohttp_server_lwt.{native,byte}>: pkg_re.emacs
<bin/cohttp_server_lwt.{native,byte}>: pkg_sexplib
<bin/cohttp_server_lwt.{native,byte}>: pkg_sexplib.syntax
<bin/cohttp_server_lwt.{native,byte}>: pkg_stringext
<bin/cohttp_server_lwt.{native,byte}>: pkg_unix
<bin/cohttp_server_lwt.{native,byte}>: pkg_uri
<bin/cohttp_server_lwt.{native,byte}>: pkg_uri.services
<bin/cohttp_server_lwt.{native,byte}>: use_cohttp
<bin/cohttp_server_lwt.{native,byte}>: use_cohttp_lwt
<bin/cohttp_server_lwt.{native,byte}>: use_cohttp_lwt_unix
<bin/*.ml{,i}>: pkg_fieldslib
<bin/*.ml{,i}>: pkg_fieldslib.syntax
<bin/*.ml{,i}>: pkg_lwt
<bin/*.ml{,i}>: pkg_lwt.ssl
<bin/*.ml{,i}>: pkg_lwt.syntax
<bin/*.ml{,i}>: pkg_lwt.unix
<bin/*.ml{,i}>: pkg_re.emacs
<bin/*.ml{,i}>: pkg_sexplib
<bin/*.ml{,i}>: pkg_sexplib.syntax
<bin/*.ml{,i}>: pkg_stringext
<bin/*.ml{,i}>: pkg_unix
<bin/*.ml{,i}>: pkg_uri
<bin/*.ml{,i}>: pkg_uri.services
<bin/*.ml{,i}>: use_cohttp
<bin/*.ml{,i}>: use_cohttp_lwt
<bin/*.ml{,i}>: use_cohttp_lwt_unix
<bin/cohttp_server_lwt.{native,byte}>: custom
# Executable async-hello-world
<examples/async/hello_world.{native,byte}>: pkg_async
<examples/async/hello_world.{native,byte}>: pkg_async_ssl
<examples/async/hello_world.{native,byte}>: pkg_fieldslib
<examples/async/hello_world.{native,byte}>: pkg_fieldslib.syntax
<examples/async/hello_world.{native,byte}>: pkg_re.emacs
<examples/async/hello_world.{native,byte}>: pkg_sexplib
<examples/async/hello_world.{native,byte}>: pkg_sexplib.syntax
<examples/async/hello_world.{native,byte}>: pkg_stringext
<examples/async/hello_world.{native,byte}>: pkg_threads
<examples/async/hello_world.{native,byte}>: pkg_uri
<examples/async/hello_world.{native,byte}>: pkg_uri.services
<examples/async/hello_world.{native,byte}>: use_cohttp
<examples/async/hello_world.{native,byte}>: use_cohttp_async
<examples/async/*.ml{,i}>: pkg_async
<examples/async/*.ml{,i}>: pkg_async_ssl
<examples/async/*.ml{,i}>: pkg_fieldslib
<examples/async/*.ml{,i}>: pkg_fieldslib.syntax
<examples/async/*.ml{,i}>: pkg_re.emacs
<examples/async/*.ml{,i}>: pkg_sexplib
<examples/async/*.ml{,i}>: pkg_sexplib.syntax
<examples/async/*.ml{,i}>: pkg_stringext
<examples/async/*.ml{,i}>: pkg_threads
<examples/async/*.ml{,i}>: pkg_uri
<examples/async/*.ml{,i}>: pkg_uri.services
<examples/async/*.ml{,i}>: use_cohttp
<examples/async/*.ml{,i}>: use_cohttp_async
<examples/async/hello_world.{native,byte}>: custom
# OASIS_STOP
<async/**>: syntax_camlp4o, pkg_optcomp
