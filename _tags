# OASIS_START
# DO NOT EDIT (digest: 6e864c3948f8c930a0f98014804e0bda)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library cohttp
"lib/cohttp.cmxs": use_cohttp
"lib/s.cmx": for-pack(Cohttp)
"lib/code.cmx": for-pack(Cohttp)
"lib/header.cmx": for-pack(Cohttp)
"lib/cookie.cmx": for-pack(Cohttp)
"lib/request.cmx": for-pack(Cohttp)
"lib/response.cmx": for-pack(Cohttp)
"lib/transfer.cmx": for-pack(Cohttp)
"lib/accept.cmx": for-pack(Cohttp)
"lib/accept_parser.cmx": for-pack(Cohttp)
"lib/accept_lexer.cmx": for-pack(Cohttp)
"lib/accept_types.cmx": for-pack(Cohttp)
"lib/auth.cmx": for-pack(Cohttp)
"lib/header_io.cmx": for-pack(Cohttp)
"lib/transfer_io.cmx": for-pack(Cohttp)
"lib/connection.cmx": for-pack(Cohttp)
"lib/body.cmx": for-pack(Cohttp)
"lib/string_io.cmx": for-pack(Cohttp)
<lib/*.ml{,i,y}>: package(base64)
<lib/*.ml{,i,y}>: package(bytes)
<lib/*.ml{,i,y}>: package(fieldslib)
<lib/*.ml{,i,y}>: package(fieldslib.syntax)
<lib/*.ml{,i,y}>: package(re.emacs)
<lib/*.ml{,i,y}>: package(sexplib)
<lib/*.ml{,i,y}>: package(sexplib.syntax)
<lib/*.ml{,i,y}>: package(stringext)
<lib/*.ml{,i,y}>: package(uri)
<lib/*.ml{,i,y}>: package(uri.services)
# Library cohttp_lwt
"lwt/cohttp_lwt.cmxs": use_cohttp_lwt
# Library cohttp_lwt_unix
"lwt/cohttp_lwt_unix.cmxs": use_cohttp_lwt_unix
<lwt/*.ml{,i,y}>: package(base64)
<lwt/*.ml{,i,y}>: package(bytes)
<lwt/*.ml{,i,y}>: package(conduit.lwt-unix)
<lwt/*.ml{,i,y}>: package(fieldslib)
<lwt/*.ml{,i,y}>: package(fieldslib.syntax)
<lwt/*.ml{,i,y}>: package(lwt)
<lwt/*.ml{,i,y}>: package(lwt.syntax)
<lwt/*.ml{,i,y}>: package(lwt.unix)
<lwt/*.ml{,i,y}>: package(re.emacs)
<lwt/*.ml{,i,y}>: package(sexplib)
<lwt/*.ml{,i,y}>: package(sexplib.syntax)
<lwt/*.ml{,i,y}>: package(stringext)
<lwt/*.ml{,i,y}>: package(unix)
<lwt/*.ml{,i,y}>: package(uri)
<lwt/*.ml{,i,y}>: package(uri.services)
<lwt/*.ml{,i,y}>: use_cohttp
<lwt/*.ml{,i,y}>: use_cohttp_lwt
# Library cohttp_lwt_xhr
"js/cohttp_lwt_xhr.cmxs": use_cohttp_lwt_xhr
<js/*.ml{,i,y}>: package(base64)
<js/*.ml{,i,y}>: package(bytes)
<js/*.ml{,i,y}>: package(fieldslib)
<js/*.ml{,i,y}>: package(fieldslib.syntax)
<js/*.ml{,i,y}>: package(js_of_ocaml)
<js/*.ml{,i,y}>: package(js_of_ocaml.syntax)
<js/*.ml{,i,y}>: package(lwt)
<js/*.ml{,i,y}>: package(lwt.syntax)
<js/*.ml{,i,y}>: package(re.emacs)
<js/*.ml{,i,y}>: package(sexplib)
<js/*.ml{,i,y}>: package(sexplib.syntax)
<js/*.ml{,i,y}>: package(stringext)
<js/*.ml{,i,y}>: package(uri)
<js/*.ml{,i,y}>: package(uri.services)
<js/*.ml{,i,y}>: use_cohttp
<js/*.ml{,i,y}>: use_cohttp_lwt
# Library cohttp_async
"async/cohttp_async.cmxs": use_cohttp_async
<async/*.ml{,i,y}>: package(async)
<async/*.ml{,i,y}>: package(base64)
<async/*.ml{,i,y}>: package(bytes)
<async/*.ml{,i,y}>: package(conduit.async)
<async/*.ml{,i,y}>: package(fieldslib)
<async/*.ml{,i,y}>: package(fieldslib.syntax)
<async/*.ml{,i,y}>: package(re.emacs)
<async/*.ml{,i,y}>: package(sexplib)
<async/*.ml{,i,y}>: package(sexplib.syntax)
<async/*.ml{,i,y}>: package(stringext)
<async/*.ml{,i,y}>: package(threads)
<async/*.ml{,i,y}>: package(uri)
<async/*.ml{,i,y}>: package(uri.services)
<async/*.ml{,i,y}>: use_cohttp
# Executable test_parser
<lib_test/test_parser.{native,byte}>: package(base64)
<lib_test/test_parser.{native,byte}>: package(bytes)
<lib_test/test_parser.{native,byte}>: package(conduit.lwt-unix)
<lib_test/test_parser.{native,byte}>: package(fieldslib)
<lib_test/test_parser.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_parser.{native,byte}>: package(lwt)
<lib_test/test_parser.{native,byte}>: package(lwt.syntax)
<lib_test/test_parser.{native,byte}>: package(lwt.unix)
<lib_test/test_parser.{native,byte}>: package(oUnit)
<lib_test/test_parser.{native,byte}>: package(re.emacs)
<lib_test/test_parser.{native,byte}>: package(sexplib)
<lib_test/test_parser.{native,byte}>: package(sexplib.syntax)
<lib_test/test_parser.{native,byte}>: package(stringext)
<lib_test/test_parser.{native,byte}>: package(unix)
<lib_test/test_parser.{native,byte}>: package(uri)
<lib_test/test_parser.{native,byte}>: package(uri.services)
<lib_test/test_parser.{native,byte}>: use_cohttp
<lib_test/test_parser.{native,byte}>: use_cohttp_lwt
<lib_test/test_parser.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_parser.{native,byte}>: custom
# Executable test_accept
<lib_test/test_accept.{native,byte}>: package(base64)
<lib_test/test_accept.{native,byte}>: package(bytes)
<lib_test/test_accept.{native,byte}>: package(fieldslib)
<lib_test/test_accept.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_accept.{native,byte}>: package(oUnit)
<lib_test/test_accept.{native,byte}>: package(re.emacs)
<lib_test/test_accept.{native,byte}>: package(sexplib)
<lib_test/test_accept.{native,byte}>: package(sexplib.syntax)
<lib_test/test_accept.{native,byte}>: package(stringext)
<lib_test/test_accept.{native,byte}>: package(uri)
<lib_test/test_accept.{native,byte}>: package(uri.services)
<lib_test/test_accept.{native,byte}>: use_cohttp
<lib_test/test_accept.{native,byte}>: custom
# Executable test_header
<lib_test/test_header.{native,byte}>: package(base64)
<lib_test/test_header.{native,byte}>: package(bytes)
<lib_test/test_header.{native,byte}>: package(fieldslib)
<lib_test/test_header.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_header.{native,byte}>: package(oUnit)
<lib_test/test_header.{native,byte}>: package(re.emacs)
<lib_test/test_header.{native,byte}>: package(sexplib)
<lib_test/test_header.{native,byte}>: package(sexplib.syntax)
<lib_test/test_header.{native,byte}>: package(stringext)
<lib_test/test_header.{native,byte}>: package(uri)
<lib_test/test_header.{native,byte}>: package(uri.services)
<lib_test/test_header.{native,byte}>: use_cohttp
<lib_test/test_header.{native,byte}>: custom
# Executable test_net_lwt
<lib_test/test_net_lwt.{native,byte}>: package(base64)
<lib_test/test_net_lwt.{native,byte}>: package(bytes)
<lib_test/test_net_lwt.{native,byte}>: package(conduit.lwt-unix)
<lib_test/test_net_lwt.{native,byte}>: package(fieldslib)
<lib_test/test_net_lwt.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_lwt.{native,byte}>: package(lwt)
<lib_test/test_net_lwt.{native,byte}>: package(lwt.syntax)
<lib_test/test_net_lwt.{native,byte}>: package(lwt.unix)
<lib_test/test_net_lwt.{native,byte}>: package(oUnit)
<lib_test/test_net_lwt.{native,byte}>: package(re.emacs)
<lib_test/test_net_lwt.{native,byte}>: package(sexplib)
<lib_test/test_net_lwt.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_lwt.{native,byte}>: package(stringext)
<lib_test/test_net_lwt.{native,byte}>: package(unix)
<lib_test/test_net_lwt.{native,byte}>: package(uri)
<lib_test/test_net_lwt.{native,byte}>: package(uri.services)
<lib_test/test_net_lwt.{native,byte}>: use_cohttp
<lib_test/test_net_lwt.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt.{native,byte}>: custom
# Executable test_net_lwt_google
<lib_test/test_net_lwt_google.{native,byte}>: package(base64)
<lib_test/test_net_lwt_google.{native,byte}>: package(bytes)
<lib_test/test_net_lwt_google.{native,byte}>: package(conduit.lwt-unix)
<lib_test/test_net_lwt_google.{native,byte}>: package(fieldslib)
<lib_test/test_net_lwt_google.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_lwt_google.{native,byte}>: package(lwt)
<lib_test/test_net_lwt_google.{native,byte}>: package(lwt.syntax)
<lib_test/test_net_lwt_google.{native,byte}>: package(lwt.unix)
<lib_test/test_net_lwt_google.{native,byte}>: package(re.emacs)
<lib_test/test_net_lwt_google.{native,byte}>: package(sexplib)
<lib_test/test_net_lwt_google.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_lwt_google.{native,byte}>: package(stringext)
<lib_test/test_net_lwt_google.{native,byte}>: package(unix)
<lib_test/test_net_lwt_google.{native,byte}>: package(uri)
<lib_test/test_net_lwt_google.{native,byte}>: package(uri.services)
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_google.{native,byte}>: custom
# Executable test_net_lwt_google_custom_ctx
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(base64)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(bytes)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(conduit.lwt-unix)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(fieldslib)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(lwt)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(lwt.syntax)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(lwt.unix)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(re.emacs)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(sexplib)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(stringext)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(unix)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(uri)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: package(uri.services)
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_google_custom_ctx.{native,byte}>: custom
# Executable test_net_lwt_lastminute
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(base64)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(bytes)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(conduit.lwt-unix)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(fieldslib)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(lwt)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(lwt.syntax)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(lwt.unix)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(re.emacs)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(sexplib)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(stringext)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(unix)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(uri)
<lib_test/test_net_lwt_lastminute.{native,byte}>: package(uri.services)
<lib_test/test_net_lwt_lastminute.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_lastminute.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_lastminute.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_lastminute.{native,byte}>: custom
# Executable test_net_lwt_server
<lib_test/test_net_lwt_server.{native,byte}>: package(base64)
<lib_test/test_net_lwt_server.{native,byte}>: package(bytes)
<lib_test/test_net_lwt_server.{native,byte}>: package(conduit.lwt-unix)
<lib_test/test_net_lwt_server.{native,byte}>: package(fieldslib)
<lib_test/test_net_lwt_server.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_lwt_server.{native,byte}>: package(lwt)
<lib_test/test_net_lwt_server.{native,byte}>: package(lwt.syntax)
<lib_test/test_net_lwt_server.{native,byte}>: package(lwt.unix)
<lib_test/test_net_lwt_server.{native,byte}>: package(re.emacs)
<lib_test/test_net_lwt_server.{native,byte}>: package(sexplib)
<lib_test/test_net_lwt_server.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_lwt_server.{native,byte}>: package(stringext)
<lib_test/test_net_lwt_server.{native,byte}>: package(unix)
<lib_test/test_net_lwt_server.{native,byte}>: package(uri)
<lib_test/test_net_lwt_server.{native,byte}>: package(uri.services)
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_server.{native,byte}>: custom
# Executable test_net_lwt_multi_get
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(base64)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(bytes)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(conduit.lwt-unix)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(fieldslib)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(lwt)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(lwt.syntax)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(lwt.unix)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(re.emacs)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(sexplib)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(stringext)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(unix)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(uri)
<lib_test/test_net_lwt_multi_get.{native,byte}>: package(uri.services)
<lib_test/test_net_lwt_multi_get.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_multi_get.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_multi_get.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_multi_get.{native,byte}>: custom
# Executable test_net_lwt_client_and_server
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(base64)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(bytes)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(conduit.lwt-unix)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(fieldslib)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(lwt)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(lwt.syntax)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(lwt.unix)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(re.emacs)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(sexplib)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(stringext)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(unix)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(uri)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: package(uri.services)
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp_lwt
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp_lwt_unix
<lib_test/*.ml{,i,y}>: package(conduit.lwt-unix)
<lib_test/*.ml{,i,y}>: package(lwt.unix)
<lib_test/*.ml{,i,y}>: package(unix)
<lib_test/*.ml{,i,y}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: custom
# Executable test_net_async
<lib_test/test_net_async.{native,byte}>: package(async)
<lib_test/test_net_async.{native,byte}>: package(base64)
<lib_test/test_net_async.{native,byte}>: package(bytes)
<lib_test/test_net_async.{native,byte}>: package(conduit.async)
<lib_test/test_net_async.{native,byte}>: package(fieldslib)
<lib_test/test_net_async.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_async.{native,byte}>: package(oUnit)
<lib_test/test_net_async.{native,byte}>: package(re.emacs)
<lib_test/test_net_async.{native,byte}>: package(sexplib)
<lib_test/test_net_async.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_async.{native,byte}>: package(stringext)
<lib_test/test_net_async.{native,byte}>: package(threads)
<lib_test/test_net_async.{native,byte}>: package(uri)
<lib_test/test_net_async.{native,byte}>: package(uri.services)
<lib_test/test_net_async.{native,byte}>: use_cohttp
<lib_test/test_net_async.{native,byte}>: use_cohttp_async
<lib_test/test_net_async.{native,byte}>: custom
# Executable test_net_async_http10
<lib_test/test_net_async_http10.{native,byte}>: package(async)
<lib_test/test_net_async_http10.{native,byte}>: package(base64)
<lib_test/test_net_async_http10.{native,byte}>: package(bytes)
<lib_test/test_net_async_http10.{native,byte}>: package(conduit.async)
<lib_test/test_net_async_http10.{native,byte}>: package(fieldslib)
<lib_test/test_net_async_http10.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_async_http10.{native,byte}>: package(oUnit)
<lib_test/test_net_async_http10.{native,byte}>: package(re.emacs)
<lib_test/test_net_async_http10.{native,byte}>: package(sexplib)
<lib_test/test_net_async_http10.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_async_http10.{native,byte}>: package(stringext)
<lib_test/test_net_async_http10.{native,byte}>: package(threads)
<lib_test/test_net_async_http10.{native,byte}>: package(uri)
<lib_test/test_net_async_http10.{native,byte}>: package(uri.services)
<lib_test/test_net_async_http10.{native,byte}>: use_cohttp
<lib_test/test_net_async_http10.{native,byte}>: use_cohttp_async
<lib_test/test_net_async_http10.{native,byte}>: custom
# Executable test_net_async_multi_get
<lib_test/test_net_async_multi_get.{native,byte}>: package(async)
<lib_test/test_net_async_multi_get.{native,byte}>: package(base64)
<lib_test/test_net_async_multi_get.{native,byte}>: package(bytes)
<lib_test/test_net_async_multi_get.{native,byte}>: package(conduit.async)
<lib_test/test_net_async_multi_get.{native,byte}>: package(fieldslib)
<lib_test/test_net_async_multi_get.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_async_multi_get.{native,byte}>: package(oUnit)
<lib_test/test_net_async_multi_get.{native,byte}>: package(re.emacs)
<lib_test/test_net_async_multi_get.{native,byte}>: package(sexplib)
<lib_test/test_net_async_multi_get.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_async_multi_get.{native,byte}>: package(stringext)
<lib_test/test_net_async_multi_get.{native,byte}>: package(threads)
<lib_test/test_net_async_multi_get.{native,byte}>: package(uri)
<lib_test/test_net_async_multi_get.{native,byte}>: package(uri.services)
<lib_test/test_net_async_multi_get.{native,byte}>: use_cohttp
<lib_test/test_net_async_multi_get.{native,byte}>: use_cohttp_async
<lib_test/test_net_async_multi_get.{native,byte}>: custom
# Executable test_net_async_server
<lib_test/test_net_async_server.{native,byte}>: package(async)
<lib_test/test_net_async_server.{native,byte}>: package(base64)
<lib_test/test_net_async_server.{native,byte}>: package(bytes)
<lib_test/test_net_async_server.{native,byte}>: package(conduit.async)
<lib_test/test_net_async_server.{native,byte}>: package(fieldslib)
<lib_test/test_net_async_server.{native,byte}>: package(fieldslib.syntax)
<lib_test/test_net_async_server.{native,byte}>: package(oUnit)
<lib_test/test_net_async_server.{native,byte}>: package(re.emacs)
<lib_test/test_net_async_server.{native,byte}>: package(sexplib)
<lib_test/test_net_async_server.{native,byte}>: package(sexplib.syntax)
<lib_test/test_net_async_server.{native,byte}>: package(stringext)
<lib_test/test_net_async_server.{native,byte}>: package(threads)
<lib_test/test_net_async_server.{native,byte}>: package(uri)
<lib_test/test_net_async_server.{native,byte}>: package(uri.services)
<lib_test/test_net_async_server.{native,byte}>: use_cohttp
<lib_test/test_net_async_server.{native,byte}>: use_cohttp_async
<lib_test/*.ml{,i,y}>: package(async)
<lib_test/*.ml{,i,y}>: package(conduit.async)
<lib_test/*.ml{,i,y}>: package(oUnit)
<lib_test/*.ml{,i,y}>: package(threads)
<lib_test/*.ml{,i,y}>: use_cohttp_async
<lib_test/test_net_async_server.{native,byte}>: custom
# Executable cohttp-server-async
<bin/cohttp_server_async.{native,byte}>: package(async)
<bin/cohttp_server_async.{native,byte}>: package(base64)
<bin/cohttp_server_async.{native,byte}>: package(bytes)
<bin/cohttp_server_async.{native,byte}>: package(conduit.async)
<bin/cohttp_server_async.{native,byte}>: package(fieldslib)
<bin/cohttp_server_async.{native,byte}>: package(fieldslib.syntax)
<bin/cohttp_server_async.{native,byte}>: package(re.emacs)
<bin/cohttp_server_async.{native,byte}>: package(sexplib)
<bin/cohttp_server_async.{native,byte}>: package(sexplib.syntax)
<bin/cohttp_server_async.{native,byte}>: package(stringext)
<bin/cohttp_server_async.{native,byte}>: package(threads)
<bin/cohttp_server_async.{native,byte}>: package(uri)
<bin/cohttp_server_async.{native,byte}>: package(uri.services)
<bin/cohttp_server_async.{native,byte}>: use_cohttp
<bin/cohttp_server_async.{native,byte}>: use_cohttp_async
<bin/cohttp_server_async.{native,byte}>: custom
# Executable cohttp-curl-async
<bin/cohttp_curl_async.{native,byte}>: package(async)
<bin/cohttp_curl_async.{native,byte}>: package(base64)
<bin/cohttp_curl_async.{native,byte}>: package(bytes)
<bin/cohttp_curl_async.{native,byte}>: package(conduit.async)
<bin/cohttp_curl_async.{native,byte}>: package(fieldslib)
<bin/cohttp_curl_async.{native,byte}>: package(fieldslib.syntax)
<bin/cohttp_curl_async.{native,byte}>: package(re.emacs)
<bin/cohttp_curl_async.{native,byte}>: package(sexplib)
<bin/cohttp_curl_async.{native,byte}>: package(sexplib.syntax)
<bin/cohttp_curl_async.{native,byte}>: package(stringext)
<bin/cohttp_curl_async.{native,byte}>: package(threads)
<bin/cohttp_curl_async.{native,byte}>: package(uri)
<bin/cohttp_curl_async.{native,byte}>: package(uri.services)
<bin/cohttp_curl_async.{native,byte}>: use_cohttp
<bin/cohttp_curl_async.{native,byte}>: use_cohttp_async
<bin/*.ml{,i,y}>: package(async)
<bin/*.ml{,i,y}>: package(conduit.async)
<bin/*.ml{,i,y}>: package(threads)
<bin/*.ml{,i,y}>: use_cohttp_async
<bin/cohttp_curl_async.{native,byte}>: custom
# Executable cohttp-server-lwt
<bin/cohttp_server_lwt.{native,byte}>: package(base64)
<bin/cohttp_server_lwt.{native,byte}>: package(bytes)
<bin/cohttp_server_lwt.{native,byte}>: package(conduit.lwt-unix)
<bin/cohttp_server_lwt.{native,byte}>: package(fieldslib)
<bin/cohttp_server_lwt.{native,byte}>: package(fieldslib.syntax)
<bin/cohttp_server_lwt.{native,byte}>: package(lwt)
<bin/cohttp_server_lwt.{native,byte}>: package(lwt.syntax)
<bin/cohttp_server_lwt.{native,byte}>: package(lwt.unix)
<bin/cohttp_server_lwt.{native,byte}>: package(re.emacs)
<bin/cohttp_server_lwt.{native,byte}>: package(sexplib)
<bin/cohttp_server_lwt.{native,byte}>: package(sexplib.syntax)
<bin/cohttp_server_lwt.{native,byte}>: package(stringext)
<bin/cohttp_server_lwt.{native,byte}>: package(unix)
<bin/cohttp_server_lwt.{native,byte}>: package(uri)
<bin/cohttp_server_lwt.{native,byte}>: package(uri.services)
<bin/cohttp_server_lwt.{native,byte}>: use_cohttp
<bin/cohttp_server_lwt.{native,byte}>: use_cohttp_lwt
<bin/cohttp_server_lwt.{native,byte}>: use_cohttp_lwt_unix
<bin/cohttp_server_lwt.{native,byte}>: custom
# Executable cohttp-curl-lwt
<bin/cohttp_curl_lwt.{native,byte}>: package(base64)
<bin/cohttp_curl_lwt.{native,byte}>: package(bytes)
<bin/cohttp_curl_lwt.{native,byte}>: package(cmdliner)
<bin/cohttp_curl_lwt.{native,byte}>: package(conduit.lwt-unix)
<bin/cohttp_curl_lwt.{native,byte}>: package(fieldslib)
<bin/cohttp_curl_lwt.{native,byte}>: package(fieldslib.syntax)
<bin/cohttp_curl_lwt.{native,byte}>: package(lwt)
<bin/cohttp_curl_lwt.{native,byte}>: package(lwt.syntax)
<bin/cohttp_curl_lwt.{native,byte}>: package(lwt.unix)
<bin/cohttp_curl_lwt.{native,byte}>: package(re.emacs)
<bin/cohttp_curl_lwt.{native,byte}>: package(sexplib)
<bin/cohttp_curl_lwt.{native,byte}>: package(sexplib.syntax)
<bin/cohttp_curl_lwt.{native,byte}>: package(stringext)
<bin/cohttp_curl_lwt.{native,byte}>: package(unix)
<bin/cohttp_curl_lwt.{native,byte}>: package(uri)
<bin/cohttp_curl_lwt.{native,byte}>: package(uri.services)
<bin/cohttp_curl_lwt.{native,byte}>: use_cohttp
<bin/cohttp_curl_lwt.{native,byte}>: use_cohttp_lwt
<bin/cohttp_curl_lwt.{native,byte}>: use_cohttp_lwt_unix
<bin/*.ml{,i,y}>: package(base64)
<bin/*.ml{,i,y}>: package(bytes)
<bin/*.ml{,i,y}>: package(cmdliner)
<bin/*.ml{,i,y}>: package(conduit.lwt-unix)
<bin/*.ml{,i,y}>: package(fieldslib)
<bin/*.ml{,i,y}>: package(fieldslib.syntax)
<bin/*.ml{,i,y}>: package(lwt)
<bin/*.ml{,i,y}>: package(lwt.syntax)
<bin/*.ml{,i,y}>: package(lwt.unix)
<bin/*.ml{,i,y}>: package(re.emacs)
<bin/*.ml{,i,y}>: package(sexplib)
<bin/*.ml{,i,y}>: package(sexplib.syntax)
<bin/*.ml{,i,y}>: package(stringext)
<bin/*.ml{,i,y}>: package(unix)
<bin/*.ml{,i,y}>: package(uri)
<bin/*.ml{,i,y}>: package(uri.services)
<bin/*.ml{,i,y}>: use_cohttp
<bin/*.ml{,i,y}>: use_cohttp_lwt
<bin/*.ml{,i,y}>: use_cohttp_lwt_unix
<bin/cohttp_curl_lwt.{native,byte}>: custom
# Executable async-hello-world
<examples/async/hello_world.{native,byte}>: package(async)
<examples/async/hello_world.{native,byte}>: package(base64)
<examples/async/hello_world.{native,byte}>: package(bytes)
<examples/async/hello_world.{native,byte}>: package(conduit.async)
<examples/async/hello_world.{native,byte}>: package(fieldslib)
<examples/async/hello_world.{native,byte}>: package(fieldslib.syntax)
<examples/async/hello_world.{native,byte}>: package(re.emacs)
<examples/async/hello_world.{native,byte}>: package(sexplib)
<examples/async/hello_world.{native,byte}>: package(sexplib.syntax)
<examples/async/hello_world.{native,byte}>: package(stringext)
<examples/async/hello_world.{native,byte}>: package(threads)
<examples/async/hello_world.{native,byte}>: package(uri)
<examples/async/hello_world.{native,byte}>: package(uri.services)
<examples/async/hello_world.{native,byte}>: use_cohttp
<examples/async/hello_world.{native,byte}>: use_cohttp_async
<examples/async/hello_world.{native,byte}>: custom
# Executable test_xhr
"lib_test/test_xhr.byte": package(base64)
"lib_test/test_xhr.byte": package(bytes)
"lib_test/test_xhr.byte": package(fieldslib)
"lib_test/test_xhr.byte": package(fieldslib.syntax)
"lib_test/test_xhr.byte": package(js_of_ocaml)
"lib_test/test_xhr.byte": package(js_of_ocaml.syntax)
"lib_test/test_xhr.byte": package(lwt)
"lib_test/test_xhr.byte": package(lwt.syntax)
"lib_test/test_xhr.byte": package(re.emacs)
"lib_test/test_xhr.byte": package(sexplib)
"lib_test/test_xhr.byte": package(sexplib.syntax)
"lib_test/test_xhr.byte": package(stringext)
"lib_test/test_xhr.byte": package(uri)
"lib_test/test_xhr.byte": package(uri.services)
"lib_test/test_xhr.byte": use_cohttp
"lib_test/test_xhr.byte": use_cohttp_lwt
"lib_test/test_xhr.byte": use_cohttp_lwt_xhr
<lib_test/*.ml{,i,y}>: package(base64)
<lib_test/*.ml{,i,y}>: package(bytes)
<lib_test/*.ml{,i,y}>: package(fieldslib)
<lib_test/*.ml{,i,y}>: package(fieldslib.syntax)
<lib_test/*.ml{,i,y}>: package(js_of_ocaml)
<lib_test/*.ml{,i,y}>: package(js_of_ocaml.syntax)
<lib_test/*.ml{,i,y}>: package(lwt)
<lib_test/*.ml{,i,y}>: package(lwt.syntax)
<lib_test/*.ml{,i,y}>: package(re.emacs)
<lib_test/*.ml{,i,y}>: package(sexplib)
<lib_test/*.ml{,i,y}>: package(sexplib.syntax)
<lib_test/*.ml{,i,y}>: package(stringext)
<lib_test/*.ml{,i,y}>: package(uri)
<lib_test/*.ml{,i,y}>: package(uri.services)
<lib_test/*.ml{,i,y}>: use_cohttp
<lib_test/*.ml{,i,y}>: use_cohttp_lwt
<lib_test/*.ml{,i,y}>: use_cohttp_lwt_xhr
"lib_test/test_xhr.byte": custom
# Executable async-receive-post
<examples/async/receive_post.{native,byte}>: package(async)
<examples/async/receive_post.{native,byte}>: package(base64)
<examples/async/receive_post.{native,byte}>: package(bytes)
<examples/async/receive_post.{native,byte}>: package(conduit.async)
<examples/async/receive_post.{native,byte}>: package(fieldslib)
<examples/async/receive_post.{native,byte}>: package(fieldslib.syntax)
<examples/async/receive_post.{native,byte}>: package(re.emacs)
<examples/async/receive_post.{native,byte}>: package(sexplib)
<examples/async/receive_post.{native,byte}>: package(sexplib.syntax)
<examples/async/receive_post.{native,byte}>: package(stringext)
<examples/async/receive_post.{native,byte}>: package(threads)
<examples/async/receive_post.{native,byte}>: package(uri)
<examples/async/receive_post.{native,byte}>: package(uri.services)
<examples/async/receive_post.{native,byte}>: use_cohttp
<examples/async/receive_post.{native,byte}>: use_cohttp_async
<examples/async/*.ml{,i,y}>: package(async)
<examples/async/*.ml{,i,y}>: package(base64)
<examples/async/*.ml{,i,y}>: package(bytes)
<examples/async/*.ml{,i,y}>: package(conduit.async)
<examples/async/*.ml{,i,y}>: package(fieldslib)
<examples/async/*.ml{,i,y}>: package(fieldslib.syntax)
<examples/async/*.ml{,i,y}>: package(re.emacs)
<examples/async/*.ml{,i,y}>: package(sexplib)
<examples/async/*.ml{,i,y}>: package(sexplib.syntax)
<examples/async/*.ml{,i,y}>: package(stringext)
<examples/async/*.ml{,i,y}>: package(threads)
<examples/async/*.ml{,i,y}>: package(uri)
<examples/async/*.ml{,i,y}>: package(uri.services)
<examples/async/*.ml{,i,y}>: use_cohttp
<examples/async/*.ml{,i,y}>: use_cohttp_async
<examples/async/receive_post.{native,byte}>: custom
# OASIS_STOP
true: principal, strict_sequence, debug, short_paths
