OASISFormat: 0.3
Name:        cohttp
Version:     0.15.0
Synopsis:    HTTP library for Lwt, Async, JavaScript and Mirage
Description: CoHTTP is an OCaml library for creating HTTP clients and
  daemons.  It has a portable HTTP parser.  Optional dependencies
  activate functionality:

   * Lwt: `opam install lwt cohttp`
   * Lwt and SSL: `opam install lwt ssl cohttp`
   * Async: `opam install async cohttp`
   * Async and SSL: `opam install async_ssl cohttp`

Authors:     Anil Madhavapeddy, Stefano Zacchiroli, David Sheets,
             Thomas Gazagnaire, David Scott, Rudi Grinberg, Andy Ray
Maintainers: Anil Madhavapeddy <anil@recoil.org>
Homepage:    https://github.com/mirage/ocaml-cohttp
License:     ISC
Plugins:     META (0.3)
BuildTools:  ocamlbuild
OCamlVersion: >= 4.01.0

Library cohttp
  Path:          lib
  Findlibname:   cohttp
  Pack:          true
  Modules:       S, Code, Header, Cookie, Request, Response, Transfer,
                 Accept, Accept_parser, Accept_lexer, Accept_types,
                 Auth, Header_io, Transfer_io, Connection, Body, String_io
  BuildDepends:  re.emacs, stringext, uri (>= 1.5.0), uri.services,
                 fieldslib (>= 109.20.00), fieldslib.syntax,
                 sexplib (>= 109.53.00), sexplib.syntax,
                 bytes, base64 (>= 2.0.0)
  XMETARequires: re.emacs, stringext, uri, uri.services, fieldslib,
                 sexplib, bytes, base64

Flag lwt
  Description: build the Lwt library
  Default:     false

Flag lwt_unix
  Description: build the Lwt-unix library
  Default:     false

Flag async
  Description: build the Core/Async library
  Default:     false

Flag js
  Description: build the Javascript XHR client library
  Default:     false

Flag nettests
  Description: run the internet-using tests
  Default:     false

Library cohttp_lwt
  Build$:        flag(lwt)
  Install$:      flag(lwt)
  Path:          lwt
  Findlibname:   lwt-core
  FindlibParent: cohttp
  BuildDepends:  lwt, uri, cohttp, lwt.syntax
  XMETARequires: lwt, uri, cohttp
  Modules:       Cohttp_lwt_body, Cohttp_lwt, String_io_lwt

Library cohttp_lwt_unix
  Build$:        flag(lwt_unix)
  Install$:      flag(lwt_unix)
  Path:          lwt
  Findlibname:   lwt
  FindlibParent: cohttp
  BuildDepends:  cohttp.lwt-core, unix, lwt.unix, conduit.lwt-unix (>= 0.7.0)
  XMETARequires: cohttp.lwt-core, unix, lwt.unix, conduit.lwt-unix
  Modules:       Cohttp_lwt_unix_io, Cohttp_lwt_unix, Cohttp_lwt_unix_net, Cohttp_lwt_unix_debug

Library cohttp_lwt_xhr
  Build$:        flag(lwt) && flag(js)
  Install$:      flag(lwt) && flag(js)
  Path:          js
  Findlibname:   js
  FindlibParent: cohttp
  BuildDepends:  cohttp.lwt-core, js_of_ocaml, js_of_ocaml.syntax
  XMETARequires: cohttp.lwt-core, js_of_ocaml
  Modules:       Cohttp_lwt_xhr

Library cohttp_async
  Build$:        flag(async)
  Install$:      flag(async)
  Path:          async
  Findlibname:   async
  FindlibParent: cohttp
  BuildDepends:  uri, cohttp, threads, async, conduit.async (>= 0.7.0)
  Modules:       Cohttp_async_io, Cohttp_async

Document cohttp
  Title:                Cohttp docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlbuildPath:      lib
  XOCamlbuildLibraries: cohttp

Document cohttp_lwt
  Title:                Cohttp Lwt docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Build$:               flag(lwt)
  Install:              true
  XOCamlbuildPath:      lwt
  XOCamlbuildLibraries: cohttp.lwt-core

Document cohttp_lwt_unix
  Title:                Cohttp Lwt UNIX docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Build$:               flag(lwt_unix)
  Install:              true
  XOCamlbuildPath:      lwt
  XOCamlbuildLibraries: cohttp.lwt

Document cohttp_async
  Title:                Cohttp Async docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Build$:               flag(async)
  Install:              true
  XOCamlbuildPath:      async
  XOCamlbuildLibraries: cohttp.async

Executable test_parser
  Path:               lib_test
  MainIs:             test_parser.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt, oUnit (>= 1.0.2)

Executable test_accept
  Path:               lib_test
  MainIs:             test_accept.ml
  Build$:             flag(tests)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, oUnit (>= 1.0.2)

Executable test_header
  Path:               lib_test
  MainIs:             test_header.ml
  Build$:             flag(tests)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, oUnit (>= 1.0.2)

Executable test_net_lwt
  Path:               lib_test
  MainIs:             test_net_lwt.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt, oUnit (>= 1.0.2)

Executable test_net_lwt_google
  Path:               lib_test
  MainIs:             test_net_lwt_google.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp.lwt

Executable test_net_lwt_google_custom_ctx
  Path:               lib_test
  MainIs:             test_net_lwt_google_custom_ctx.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp.lwt

Executable test_net_lwt_lastminute
  Path:               lib_test
  MainIs:             test_net_lwt_lastminute.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp.lwt

Executable test_net_lwt_server
  Path:               lib_test
  MainIs:             test_net_lwt_server.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt

Executable test_net_lwt_multi_get
  Path:               lib_test
  MainIs:             test_net_lwt_multi_get.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt

Executable test_net_lwt_client_and_server
  Path:               lib_test
  MainIs:             test_net_lwt_client_and_server.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt

Executable test_net_async
  Path:               lib_test
  MainIs:             test_net_async.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async, oUnit (>= 1.0.2)

Executable test_net_async_http10
  Path:               lib_test
  MainIs:             test_net_async_http10.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async, oUnit (>= 1.0.2)

Executable test_net_async_multi_get
  Path:               lib_test
  MainIs:             test_net_async_multi_get.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async, oUnit (>= 1.0.2)

Executable test_net_async_server
  Path:               lib_test
  MainIs:             test_net_async_server.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async, oUnit (>= 1.0.2)

Executable "cohttp-server-async"
  Path:               bin
  MainIs:             cohttp_server_async.ml
  Build$:             flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            true
  BuildDepends:       cohttp, cohttp.async

Executable "cohttp-curl-async"
  Path:               bin
  MainIs:             cohttp_curl_async.ml
  Build$:             flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async

Executable "cohttp-server-lwt"
  Path:               bin
  MainIs:             cohttp_server_lwt.ml
  Build$:             flag(lwt) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            true
  BuildDepends:       cohttp, cohttp.lwt

Executable "cohttp-curl-lwt"
  Path:               bin
  MainIs:             cohttp_curl_lwt.ml
  Build$:             flag(lwt) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            true
  BuildDepends:       cohttp, cohttp.lwt, cmdliner (>= 0.9.4)

Executable "async-hello-world"
  Path:               examples/async
  MainIs:             hello_world.ml
  Build$:             flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async

Executable "test_xhr"
  Path:               lib_test
  MainIs:             test_xhr.ml
  Build$:             flag(tests) && flag(lwt) && flag(js)
  Custom:             true
  CompiledObject:     byte
  Install:            false
  BuildDepends:       cohttp, cohttp.js, lwt.syntax, js_of_ocaml.syntax

Executable "async-receive-post"
  Path:               examples/async
  MainIs:             receive_post.ml
  Build$:             flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async

Test test_accept
  Run$:               flag(tests)
  Command:            $test_accept
  WorkingDirectory:   lib_test

Test test_header
  Run$:               flag(tests)
  Command:            $test_header
  WorkingDirectory:   lib_test

Test test_parser
  Run$:               flag(tests) && flag(lwt_unix)
  Command:            $test_parser
  WorkingDirectory:   lib_test

Test test_net_lwt
  Run$:               flag(nettests) && flag(lwt_unix)
  Command:            $test_net_lwt
  WorkingDirectory:   lib_test

Test test_net_async
  Run$:               flag(nettests) && flag(async)
  Command:            $test_net_async
  WorkingDirectory:   lib_test


SourceRepository master
  Type:     git
  Location: https://github.com/mirage/ocaml-cohttp.git
  Browser:  https://github.com/mirage/ocaml-cohttp
