OASISFormat: 0.4
Name:        cohttp
Version:     0.18.0
Synopsis:    HTTP library for Lwt, Async, JavaScript and Mirage
Description: CoHTTP is an OCaml library for creating HTTP clients and
  daemons.  It has a portable HTTP parser.  Optional dependencies
  activate functionality:

   * Lwt: `opam install lwt cohttp`
   * Lwt and SSL: `opam install lwt ssl cohttp`
   * Async: `opam install async cohttp`
   * Async and SSL: `opam install async_ssl cohttp`

Authors:     Anil Madhavapeddy, Stefano Zacchiroli, David Sheets,
             Thomas Gazagnaire, David Scott, Rudi Grinberg, Andy Ray,
             Christophe Troestler
Maintainers: Anil Madhavapeddy <anil@recoil.org>
Homepage:    https://github.com/mirage/ocaml-cohttp
License:     ISC
Plugins:     META (0.4)
BuildTools:  ocamlbuild
FilesAB:     lib/cohttp_conf.ml.ab

Library cohttp
  Path:          lib
  Findlibname:   cohttp
  Modules:       Cohttp,
                 Cohttp_s,
                 Cohttp_code,
                 Cohttp_header,
                 Cohttp_cookie,
                 Cohttp_request,
                 Cohttp_response,
                 Cohttp_transfer,
                 Cohttp_accept,
                 Cohttp_accept_parser,
                 Cohttp_accept_lexer,
                 Cohttp_accept_types,
                 Cohttp_link,
                 Cohttp_auth,
                 Cohttp_header_io,
                 Cohttp_transfer_io,
                 Cohttp_connection,
                 Cohttp_body,
                 Cohttp_string_io,
                 Cohttp_conf

  BuildDepends:  re.emacs, stringext, uri (>= 1.5.0), uri.services,
                 fieldslib (>= 109.20.00), fieldslib.syntax,
                 sexplib (>= 109.53.00), sexplib.syntax,
                 bytes, base64 (>= 2.0.0)
  XMETARequires: re.emacs, stringext, uri, uri.services, fieldslib,
                 sexplib, bytes, base64

Library cohttp_test
  Build$:        flag(tests)
  Install:       false
  Path:          lib
  Findlibname:   test
  FindlibParent: cohttp
  Modules:       Cohttp_test
  BuildDepends:  cohttp, oUnit

Library cohttp_top
  Install:       true
  Path:          top
  Findlibname:   top
  FindlibParent: cohttp
  XMETARequires: cohttp
  BuildDepends:  compiler-libs.toplevel
  Modules:       Cohttp_top

Flag all
  Description: build everything that is possible
  Default:     false

Flag lwt
  Description: build the Lwt library
  Default$:    flag(all)

Flag lwt_unix
  Description: build the Lwt-unix library
  Default$:    flag(all)

Flag async
  Description: build the Core/Async library
  Default$:    flag(all)

Flag js
  Description: build the Javascript XHR client library
  Default$:    flag(all)

Flag nettests
  Description: run the internet-using tests
  Default$:    flag(all)

Flag async_s3_example
  Description: build the async s3 example
  Default$:    flag(all)

Library cohttp_lwt
  Build$:        flag(lwt)
  Install$:      flag(lwt)
  Path:          lwt
  Findlibname:   lwt-core
  FindlibParent: cohttp
  BuildDepends:  lwt, uri, cohttp
  XMETARequires: lwt, uri, cohttp
  Modules:       Cohttp_lwt_body,
                 Cohttp_lwt,
                 Cohttp_string_io_lwt

Library cohttp_lwt_unix
  Build$:        flag(lwt_unix)
  Install$:      flag(lwt_unix)
  Path:          lwt_unix
  Findlibname:   lwt
  FindlibParent: cohttp
  BuildDepends:  cohttp.lwt-core, unix, lwt.unix, conduit.lwt-unix (>= 0.7.0), magic-mime
  XMETARequires: cohttp.lwt-core, unix, lwt.unix, conduit.lwt-unix, magic-mime
  Modules:       Cohttp_lwt_unix_io,
                 Cohttp_lwt_unix,
                 Cohttp_lwt_unix_net,
                 Cohttp_lwt_unix_debug

Library cohttp_lwt_xhr
  Build$:        flag(lwt) && flag(js)
  Install$:      flag(lwt) && flag(js)
  Path:          js
  Findlibname:   js
  FindlibParent: cohttp
  BuildDepends:  cohttp.lwt-core, js_of_ocaml, js_of_ocaml.syntax, lwt.syntax
  XMETARequires: cohttp.lwt-core, js_of_ocaml
  Modules:       Cohttp_lwt_xhr

Library cohttp_async
  Build$:        flag(async)
  Install$:      flag(async)
  Path:          async
  Findlibname:   async
  FindlibParent: cohttp
  BuildDepends:  uri, cohttp, threads, async, conduit.async (>= 0.7.0), magic-mime
  Modules:       Cohttp_async_io,
                 Cohttp_async

Library cohttp_lwt_unix_test
  Build$:        flag(lwt_unix) && flag(tests)
  Install:       false
  Path:          lwt_unix
  Findlibname:   lwt-unix-test
  FindlibParent: cohttp
  BuildDepends:  cohttp.test, cohttp.lwt, unix, lwt.unix, oUnit
  Modules:       Cohttp_lwt_unix_test

Library cohttp_async_test
  Build$:        flag(async) && flag(tests)
  Install:       false
  Path:          async
  Findlibname:   async-test
  FindlibParent: cohttp
  BuildDepends:  cohttp.test, cohttp.async, oUnit
  Modules:       Cohttp_async_test

Document cohttp
  Title:                Cohttp docs
  Type:                 ocamlbuild (0.4)
  BuildTools+:          ocamldoc
  Install:              true
  XOCamlbuildPath:      lib
  XOCamlbuildLibraries: cohttp

Document cohttp_lwt
  Title:                Cohttp Lwt docs
  Type:                 ocamlbuild (0.4)
  BuildTools+:          ocamldoc
  Build$:               flag(lwt_unix)
  Install:              true
  XOCamlbuildPath:      lwt
  XOCamlbuildLibraries: cohttp.lwt-core, cohttp.lwt

Document cohttp_async
  Title:                Cohttp Async docs
  Type:                 ocamlbuild (0.4)
  BuildTools+:          ocamldoc
  Build$:               flag(async)
  Install:              true
  XOCamlbuildPath:      async
  XOCamlbuildLibraries: cohttp.async

Executable test_parser
  Path:               lib_test
  MainIs:             test_parser.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt, oUnit (>= 1.0.2)

Executable test_parser_async
  Path:               lib_test
  MainIs:             test_parser_async.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async, oUnit (>= 1.0.2)

Executable test_accept
  Path:               lib_test
  MainIs:             test_accept.ml
  Build$:             flag(tests)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, oUnit (>= 1.0.2)

Executable test_header
  Path:               lib_test
  MainIs:             test_header.ml
  Build$:             flag(tests)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, oUnit (>= 1.0.2), alcotest

Executable test_request
  Path:               lib_test
  MainIs:             test_request.ml
  Build$:             flag(tests)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, oUnit (>= 1.0.2), alcotest

Executable test_net_lwt
  Path:               lib_test
  MainIs:             test_net_lwt.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt, oUnit (>= 1.0.2), alcotest

Executable test_net_lwt_google
  Path:               lib_test
  MainIs:             test_net_lwt_google.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp.lwt

Executable test_net_lwt_google_custom_ctx
  Path:               lib_test
  MainIs:             test_net_lwt_google_custom_ctx.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp.lwt

Executable test_net_lwt_lastminute
  Path:               lib_test
  MainIs:             test_net_lwt_lastminute.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp.lwt

Executable test_net_lwt_server
  Path:               lib_test
  MainIs:             test_net_lwt_server.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt

Executable test_net_lwt_multi_get
  Path:               lib_test
  MainIs:             test_net_lwt_multi_get.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt

Executable test_net_lwt_client_and_server
  Path:               lib_test
  MainIs:             test_net_lwt_client_and_server.ml
  Build$:             flag(tests) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt

Executable test_net_async
  Path:               lib_test
  MainIs:             test_net_async.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async, oUnit (>= 1.0.2)

Executable test_net_async_http10
  Path:               lib_test
  MainIs:             test_net_async_http10.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async, oUnit (>= 1.0.2)

Executable test_net_async_multi_get
  Path:               lib_test
  MainIs:             test_net_async_multi_get.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async, oUnit (>= 1.0.2)

Executable test_net_async_server
  Path:               lib_test
  MainIs:             test_net_async_server.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async, oUnit (>= 1.0.2)

Executable test_async_integration
  Path:               lib_test
  MainIs:             test_async_integration.ml
  Build$:             flag(tests) && flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp.async-test

Executable "cohttp-server-async"
  Path:               bin
  MainIs:             cohttp_server_async.ml
  Build$:             flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async

Executable "cohttp-curl-async"
  Path:               bin
  MainIs:             cohttp_curl_async.ml
  Build$:             flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async

Executable "cohttp-server-lwt"
  Path:               bin
  MainIs:             cohttp_server_lwt.ml
  Build$:             flag(lwt) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt, cmdliner (>= 0.9.4)

Executable "cohttp-proxy-lwt"
  Path:               bin
  MainIs:             cohttp_proxy_lwt.ml
  Build$:             flag(lwt) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt, cmdliner (>= 0.9.4)

Executable "cohttp-curl-lwt"
  Path:               bin
  MainIs:             cohttp_curl_lwt.ml
  Build$:             flag(lwt) && flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt, cmdliner (>= 0.9.4)

Executable "async-hello-world"
  Path:               examples/async
  MainIs:             hello_world.ml
  Build$:             flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async

Executable "async-s3-cp"
  Path:               examples/async
  MainIs:             s3_cp.ml
  Build$:             flag(async) && flag(async_s3_example)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async, nocrypto, cstruct

Executable "test_xhr"
  Path:               lib_test
  MainIs:             test_xhr.ml
  Build$:             flag(tests) && flag(lwt) && flag(js)
  Custom:             true
  CompiledObject:     byte
  Install:            false
  BuildDepends:       cohttp, cohttp.js, lwt.syntax, js_of_ocaml.syntax

Executable "async-receive-post"
  Path:               examples/async
  MainIs:             receive_post.ml
  Build$:             flag(async)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.async

Executable client_lwt_doc_example
  Path:               examples/doc
  MainIs:             client_lwt.ml
  Build$:             flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp.lwt

Executable server_lwt_doc_example
  Path:               examples/doc
  MainIs:             server_lwt.ml
  Build$:             flag(lwt_unix)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp.lwt

Executable "test_sanity"
  Path:               lib_test
  MainIs:             test_sanity.ml
  Build$:             flag(lwt_unix) && flag(tests)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       cohttp, cohttp.lwt-unix-test, lwt.unix

Test test_accept
  Run$:               flag(tests)
  Command:            $test_accept
  WorkingDirectory:   lib_test

Test test_header
  Run$:               flag(tests)
  Command:            $test_header
  WorkingDirectory:   lib_test

Test test_request
  Run$:               flag(tests)
  Command:            $test_request
  WorkingDirectory:   lib_test

Test test_parser
  Run$:               flag(tests) && flag(lwt_unix)
  Command:            $test_parser
  WorkingDirectory:   lib_test

Test test_parser_async
  Run$:               flag(tests) && flag(async)
  Command:            $test_parser_async
  WorkingDirectory:   lib_test

Test test_sanity
  Run$:             flag(tests) && flag(lwt_unix)
  Command:          $test_sanity
  WorkingDirectory: lib_test

Test test_async_integration
  Run$:             flag(tests) && flag(async)
  Command:          $test_async_integration
  WorkingDirectory: lib_test

SourceRepository master
  Type:     git
  Location: https://github.com/mirage/ocaml-cohttp.git
  Browser:  https://github.com/mirage/ocaml-cohttp
